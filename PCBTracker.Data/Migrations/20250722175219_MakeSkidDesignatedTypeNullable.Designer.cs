// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PCBTracker.Data.Context;

#nullable disable

namespace PCBTracker.Data.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250722175219_MakeSkidDesignatedTypeNullable")]
    partial class MakeSkidDesignatedTypeNullable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("PCBTracker.Domain.Entities.Board", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.HasIndex("SkidID");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.LE", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("LE");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.LE_Upgrade", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("LE_Upgrade");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAD", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("SAD");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAD_Upgrade", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("SAD_Upgrade");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAT", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("SAT");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAT_Upgrade", b =>
                {
                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("BoardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsShipped")
                        .HasColumnType("bit");

                    b.Property<string>("PartNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("PrepDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ShipDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("SkidID")
                        .HasColumnType("int");

                    b.HasKey("SerialNumber");

                    b.HasIndex("SkidID");

                    b.ToTable("SAT_Upgrade");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.Skid", b =>
                {
                    b.Property<int>("SkidID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SkidID"));

                    b.Property<string>("SkidName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("designatedType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkidID");

                    b.ToTable("Skids");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.Board", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany("Boards")
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.LE", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.LE_Upgrade", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAD", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAD_Upgrade", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAT", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.SAT_Upgrade", b =>
                {
                    b.HasOne("PCBTracker.Domain.Entities.Skid", "Skid")
                        .WithMany()
                        .HasForeignKey("SkidID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skid");
                });

            modelBuilder.Entity("PCBTracker.Domain.Entities.Skid", b =>
                {
                    b.Navigation("Boards");
                });
#pragma warning restore 612, 618
        }
    }
}
